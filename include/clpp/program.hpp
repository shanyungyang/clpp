//          Copyright Shan-Yung Yang 2010.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#ifndef CLPP_PROGRAM_HPP
#define CLPP_PROGRAM_HPP

#include <fstream>
#include <vector>
#include <string>
#include "resource.hpp"
#include "kernel.hpp"
#include "error.hpp"

namespace clpp {

/// The program object.
/** A program consists of a set of kernels. Programs may also contain
    auxiliary functions called by the \c kernel functions and constant data.
 */
class Program {
    public:
        /// Construct a program object.
        /** Instead of using this constructor directly, please use
            Context::readProgramSource or Context::readProgramSourceFile
            to create a program object.
         */
        Program(cl_program p) : my_resource(p) {}

        /// Get the \c cl_program object created by OpenCL API.
        /**
            \return The cl_program object created by OpenCL API.
         */
        cl_program id()
        {
            return *my_resource;
        }
        
        /// Release the resources allocated by the OpenCL compiler.
        /** This is a hint from the application and does not guarantee that
            the compiler will not be used in the future or that the compiler
            will actually be unloaded by the implementation. Any creation of
            the Program object after this function will reload the compiler,
            if necessary, to build the appropriate program executable.
         */
        static void unloadCompiler()
        {
            clUnloadCompiler();
        }

        /// Get the build status of this program within a specific device.
        /** The build status can be one of the following:
              - \c CL_BUILD_NONE:       No build has been performed on the
                                        program object for \a device.
              - \c CL_BUILD_ERROR:      There are errors when building the
                                        program.
              - \c CL_BUILD_SUCCESS:    The program is successfully built.
              - \c CL_BUILD_IN_PROGRESS: The program is currently being built.

            \param device   The device associated with this program.
            \return         The build status of this program on \a device.
         */
        cl_build_status status(Device device)
        {
            cl_build_status result;
            clGetProgramBuildInfo(id(), device.id(), CL_PROGRAM_BUILD_STATUS, sizeof(result), &result, NULL);
            return result;
        }
    
        /// Get the build log.
        /** A string containing the log generated by the compiler.
         */
        std::string getBuildLog(Device device)
        {
            size_t len;
            clGetProgramBuildInfo(id(), device.id(), CL_PROGRAM_BUILD_LOG, 0, NULL, &len);
            std::string buf(len, 0);
            clGetProgramBuildInfo(id(), device.id(), CL_PROGRAM_BUILD_LOG, len, &buf[0], NULL);
            return buf;
        }

        /// Get the kernel object in this program.
        /**
            \param kernel_name  The name of the kernel function.
            \return             The kernel object corresponding to the kernl
                                function.
         */
        Kernel kernel(const char* kernel_name)
        {
            cl_int err = 0;
            cl_kernel k = clCreateKernel(id(), kernel_name, &err);
            CLPP_CHECK_ERROR(err);
            return Kernel(k);
        }

    private:
        Resource<cl_program> my_resource;
}; // class Program

} // namespace clpp

#endif // CLPP_PROGRAM_HPP
