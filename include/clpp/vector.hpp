//          Copyright Shan-Yung Yang 2010.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#ifndef CLPP_VECTOR_HPP
#define CLPP_VECTOR_HPP

/* vector.hpp
 * This file is generated by genvec.lua automatically.
 * DO NOT MODIFY THIS FILE DIRECTLY.
 * Please edit genvec.lua and re-generate this file for modification.
 */

namespace clpp {

/// Construct a 2-D char vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_char2 char2(cl_char a)
{
    cl_char2 r;
    r.s[0] = a; r.s[1] = a;
    return r;
}

/// Construct a 2-D char vector from two elements.
inline cl_char2 char2(cl_char a0, cl_char a1)
{
    cl_char2 r;
    r.s[0] = a0; r.s[1] = a1;
    return r;
}

/// Construct a 4-D char vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_char4 char4(cl_char a)
{
    cl_char4 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    return r;
}

/// Construct a 4-D char vector from four elements.
inline cl_char4 char4(cl_char a0, cl_char a1, cl_char a2, cl_char a3)
{
    cl_char4 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    return r;
}

/// Construct a 4-D char vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_char4 char4(cl_char2 a)
{
    cl_char4 r;
#if defined( __CL_CHAR2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
#endif // __CL_CHAR2__
    return r;
}

/// Construct a 4-D char vector from two 2-D vectors.
inline cl_char4 char4(cl_char2 a0, cl_char2 a1)
{
    cl_char4 r;
#if defined( __CL_CHAR2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
#endif // __CL_CHAR2__
    return r;
}

/// Construct an 8-D char vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_char8 char8(cl_char a)
{
    cl_char8 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    r.s[4] = a; r.s[5] = a; r.s[6] = a; r.s[7] = a;
    return r;
}

/// Construct an 8-D char vector from eight elements.
inline cl_char8 char8(cl_char a0, cl_char a1, cl_char a2, cl_char a3, cl_char a4, cl_char a5, cl_char a6, cl_char a7)
{
    cl_char8 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    r.s[4] = a4; r.s[5] = a5; r.s[6] = a6; r.s[7] = a7;
    return r;
}

/// Construct an 8-D char vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_char8 char8(cl_char2 a)
{
    cl_char8 r;
#if defined( __CL_CHAR2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2; r.v2[2] = a.v2; r.v2[3] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[0]; r.s[7] = a.s[1];
#endif // __CL_CHAR2__
    return r;
}

/// Construct an 8-D char vector from four 2-D vectors.
inline cl_char8 char8(cl_char2 a0, cl_char2 a1, cl_char2 a2, cl_char2 a3)
{
    cl_char8 r;
#if defined( __CL_CHAR2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2; r.v2[2] = a2.v2; r.v2[3] = a3.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
    r.s[4] = a2.s[0]; r.s[5] = a2.s[1]; r.s[6] = a3.s[0]; r.s[7] = a3.s[1];
#endif // __CL_CHAR2__
    return r;
}

/// Construct an 8-D char vector from a 4-D vector.
/// This 4-D vector will be replicated to all components of the returned vector.
inline cl_char8 char8(cl_char4 a)
{
    cl_char8 r;
#if defined( __CL_CHAR4__ )
    r.v4[0] = a.v4; r.v4[1] = a.v4;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[2]; r.s[7] = a.s[3];
#endif // __CL_CHAR4__
    return r;
}

/// Construct an 8-D char vector from two 4-D vectors.
inline cl_char8 char8(cl_char4 a0, cl_char4 a1)
{
    cl_char8 r;
#if defined( __CL_CHAR4__ )
    r.v4[0] = a0.v4; r.v4[1] = a1.v4;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a1.s[0]; r.s[5] = a1.s[1]; r.s[6] = a1.s[2]; r.s[7] = a1.s[3];
#endif // __CL_CHAR4__
    return r;
}

/// Construct a 16-D char vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_char16 char16(cl_char a)
{
    cl_char16 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    r.s[4] = a; r.s[5] = a; r.s[6] = a; r.s[7] = a;
    r.s[8] = a; r.s[9] = a; r.s[10] = a; r.s[11] = a;
    r.s[12] = a; r.s[13] = a; r.s[14] = a; r.s[15] = a;
    return r;
}

/// Construct a 16-D char vector from sixteen elements.
inline cl_char16 char16(cl_char a0, cl_char a1, cl_char a2, cl_char a3, cl_char a4, cl_char a5, cl_char a6, cl_char a7, cl_char a8, cl_char a9, cl_char a10, cl_char a11, cl_char a12, cl_char a13, cl_char a14, cl_char a15)
{
    cl_char16 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    r.s[4] = a4; r.s[5] = a5; r.s[6] = a6; r.s[7] = a7;
    r.s[8] = a8; r.s[9] = a9; r.s[10] = a10; r.s[11] = a11;
    r.s[12] = a12; r.s[13] = a13; r.s[14] = a14; r.s[15] = a15;
    return r;
}

/// Construct a 16-D char vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_char16 char16(cl_char2 a)
{
    cl_char16 r;
#if defined( __CL_CHAR2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2; r.v2[2] = a.v2; r.v2[3] = a.v2;
    r.v2[4] = a.v2; r.v2[5] = a.v2; r.v2[6] = a.v2; r.v2[7] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[0]; r.s[7] = a.s[1];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[0]; r.s[11] = a.s[1];
    r.s[12] = a.s[0]; r.s[13] = a.s[1]; r.s[14] = a.s[0]; r.s[15] = a.s[1];
#endif // __CL_CHAR2__
    return r;
}

/// Construct a 16-D char vector from eight 2-D vectors.
inline cl_char16 char16(cl_char2 a0, cl_char2 a1, cl_char2 a2, cl_char2 a3, cl_char2 a4, cl_char2 a5, cl_char2 a6, cl_char2 a7)
{
    cl_char16 r;
#if defined( __CL_CHAR2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2; r.v2[2] = a2.v2; r.v2[3] = a3.v2;
    r.v2[4] = a4.v2; r.v2[5] = a5.v2; r.v2[6] = a6.v2; r.v2[7] = a7.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
    r.s[4] = a2.s[0]; r.s[5] = a2.s[1]; r.s[6] = a3.s[0]; r.s[7] = a3.s[1];
    r.s[8] = a4.s[0]; r.s[9] = a4.s[1]; r.s[10] = a5.s[0]; r.s[11] = a5.s[1];
    r.s[12] = a6.s[0]; r.s[13] = a6.s[1]; r.s[14] = a7.s[0]; r.s[15] = a7.s[1];
#endif // __CL_CHAR2__
    return r;
}

/// Construct a 16-D char vector from a 4-D vector.
/// This 4-D vector will be replicated to all components of the returned vector.
inline cl_char16 char16(cl_char4 a)
{
    cl_char16 r;
#if defined( __CL_CHAR4__ )
    r.v4[0] = a.v4; r.v4[1] = a.v4; r.v4[2] = a.v4; r.v4[3] = a.v4;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[2]; r.s[7] = a.s[3];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[2]; r.s[11] = a.s[3];
    r.s[12] = a.s[0]; r.s[13] = a.s[1]; r.s[14] = a.s[2]; r.s[15] = a.s[3];
#endif // __CL_CHAR4__
    return r;
}

/// Construct a 16-D char vector from four 4-D vectors.
inline cl_char16 char16(cl_char4 a0, cl_char4 a1, cl_char4 a2, cl_char4 a3)
{
    cl_char16 r;
#if defined( __CL_CHAR4__ )
    r.v4[0] = a0.v4; r.v4[1] = a1.v4; r.v4[2] = a2.v4; r.v4[3] = a3.v4;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a1.s[0]; r.s[5] = a1.s[1]; r.s[6] = a1.s[2]; r.s[7] = a1.s[3];
    r.s[8] = a2.s[0]; r.s[9] = a2.s[1]; r.s[10] = a2.s[2]; r.s[11] = a2.s[3];
    r.s[12] = a3.s[0]; r.s[13] = a3.s[1]; r.s[14] = a3.s[2]; r.s[15] = a3.s[3];
#endif // __CL_CHAR4__
    return r;
}

/// Construct a 16-D char vector from an 8-D vector.
/// This 8-D vector will be replicated to all components of the returned vector.
inline cl_char16 char16(cl_char8 a)
{
    cl_char16 r;
#if defined( __CL_CHAR8__ )
    r.v8[0] = a.v8; r.v8[1] = a.v8;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[4]; r.s[5] = a.s[5]; r.s[6] = a.s[6]; r.s[7] = a.s[7];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[2]; r.s[11] = a.s[3];
    r.s[12] = a.s[4]; r.s[13] = a.s[5]; r.s[14] = a.s[6]; r.s[15] = a.s[7];
#endif // __CL_CHAR8__
    return r;
}

/// Construct a 16-D char vector from two 8-D vectors.
inline cl_char16 char16(cl_char8 a0, cl_char8 a1)
{
    cl_char16 r;
#if defined( __CL_CHAR8__ )
    r.v8[0] = a0.v8; r.v8[1] = a1.v8;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a0.s[4]; r.s[5] = a0.s[5]; r.s[6] = a0.s[6]; r.s[7] = a0.s[7];
    r.s[8] = a1.s[0]; r.s[9] = a1.s[1]; r.s[10] = a1.s[2]; r.s[11] = a1.s[3];
    r.s[12] = a1.s[4]; r.s[13] = a1.s[5]; r.s[14] = a1.s[6]; r.s[15] = a1.s[7];
#endif // __CL_CHAR8__
    return r;
}

/// Construct a 2-D uchar vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_uchar2 uchar2(cl_uchar a)
{
    cl_uchar2 r;
    r.s[0] = a; r.s[1] = a;
    return r;
}

/// Construct a 2-D uchar vector from two elements.
inline cl_uchar2 uchar2(cl_uchar a0, cl_uchar a1)
{
    cl_uchar2 r;
    r.s[0] = a0; r.s[1] = a1;
    return r;
}

/// Construct a 4-D uchar vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_uchar4 uchar4(cl_uchar a)
{
    cl_uchar4 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    return r;
}

/// Construct a 4-D uchar vector from four elements.
inline cl_uchar4 uchar4(cl_uchar a0, cl_uchar a1, cl_uchar a2, cl_uchar a3)
{
    cl_uchar4 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    return r;
}

/// Construct a 4-D uchar vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_uchar4 uchar4(cl_uchar2 a)
{
    cl_uchar4 r;
#if defined( __CL_UCHAR2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
#endif // __CL_UCHAR2__
    return r;
}

/// Construct a 4-D uchar vector from two 2-D vectors.
inline cl_uchar4 uchar4(cl_uchar2 a0, cl_uchar2 a1)
{
    cl_uchar4 r;
#if defined( __CL_UCHAR2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
#endif // __CL_UCHAR2__
    return r;
}

/// Construct an 8-D uchar vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_uchar8 uchar8(cl_uchar a)
{
    cl_uchar8 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    r.s[4] = a; r.s[5] = a; r.s[6] = a; r.s[7] = a;
    return r;
}

/// Construct an 8-D uchar vector from eight elements.
inline cl_uchar8 uchar8(cl_uchar a0, cl_uchar a1, cl_uchar a2, cl_uchar a3, cl_uchar a4, cl_uchar a5, cl_uchar a6, cl_uchar a7)
{
    cl_uchar8 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    r.s[4] = a4; r.s[5] = a5; r.s[6] = a6; r.s[7] = a7;
    return r;
}

/// Construct an 8-D uchar vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_uchar8 uchar8(cl_uchar2 a)
{
    cl_uchar8 r;
#if defined( __CL_UCHAR2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2; r.v2[2] = a.v2; r.v2[3] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[0]; r.s[7] = a.s[1];
#endif // __CL_UCHAR2__
    return r;
}

/// Construct an 8-D uchar vector from four 2-D vectors.
inline cl_uchar8 uchar8(cl_uchar2 a0, cl_uchar2 a1, cl_uchar2 a2, cl_uchar2 a3)
{
    cl_uchar8 r;
#if defined( __CL_UCHAR2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2; r.v2[2] = a2.v2; r.v2[3] = a3.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
    r.s[4] = a2.s[0]; r.s[5] = a2.s[1]; r.s[6] = a3.s[0]; r.s[7] = a3.s[1];
#endif // __CL_UCHAR2__
    return r;
}

/// Construct an 8-D uchar vector from a 4-D vector.
/// This 4-D vector will be replicated to all components of the returned vector.
inline cl_uchar8 uchar8(cl_uchar4 a)
{
    cl_uchar8 r;
#if defined( __CL_UCHAR4__ )
    r.v4[0] = a.v4; r.v4[1] = a.v4;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[2]; r.s[7] = a.s[3];
#endif // __CL_UCHAR4__
    return r;
}

/// Construct an 8-D uchar vector from two 4-D vectors.
inline cl_uchar8 uchar8(cl_uchar4 a0, cl_uchar4 a1)
{
    cl_uchar8 r;
#if defined( __CL_UCHAR4__ )
    r.v4[0] = a0.v4; r.v4[1] = a1.v4;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a1.s[0]; r.s[5] = a1.s[1]; r.s[6] = a1.s[2]; r.s[7] = a1.s[3];
#endif // __CL_UCHAR4__
    return r;
}

/// Construct a 16-D uchar vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_uchar16 uchar16(cl_uchar a)
{
    cl_uchar16 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    r.s[4] = a; r.s[5] = a; r.s[6] = a; r.s[7] = a;
    r.s[8] = a; r.s[9] = a; r.s[10] = a; r.s[11] = a;
    r.s[12] = a; r.s[13] = a; r.s[14] = a; r.s[15] = a;
    return r;
}

/// Construct a 16-D uchar vector from sixteen elements.
inline cl_uchar16 uchar16(cl_uchar a0, cl_uchar a1, cl_uchar a2, cl_uchar a3, cl_uchar a4, cl_uchar a5, cl_uchar a6, cl_uchar a7, cl_uchar a8, cl_uchar a9, cl_uchar a10, cl_uchar a11, cl_uchar a12, cl_uchar a13, cl_uchar a14, cl_uchar a15)
{
    cl_uchar16 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    r.s[4] = a4; r.s[5] = a5; r.s[6] = a6; r.s[7] = a7;
    r.s[8] = a8; r.s[9] = a9; r.s[10] = a10; r.s[11] = a11;
    r.s[12] = a12; r.s[13] = a13; r.s[14] = a14; r.s[15] = a15;
    return r;
}

/// Construct a 16-D uchar vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_uchar16 uchar16(cl_uchar2 a)
{
    cl_uchar16 r;
#if defined( __CL_UCHAR2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2; r.v2[2] = a.v2; r.v2[3] = a.v2;
    r.v2[4] = a.v2; r.v2[5] = a.v2; r.v2[6] = a.v2; r.v2[7] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[0]; r.s[7] = a.s[1];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[0]; r.s[11] = a.s[1];
    r.s[12] = a.s[0]; r.s[13] = a.s[1]; r.s[14] = a.s[0]; r.s[15] = a.s[1];
#endif // __CL_UCHAR2__
    return r;
}

/// Construct a 16-D uchar vector from eight 2-D vectors.
inline cl_uchar16 uchar16(cl_uchar2 a0, cl_uchar2 a1, cl_uchar2 a2, cl_uchar2 a3, cl_uchar2 a4, cl_uchar2 a5, cl_uchar2 a6, cl_uchar2 a7)
{
    cl_uchar16 r;
#if defined( __CL_UCHAR2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2; r.v2[2] = a2.v2; r.v2[3] = a3.v2;
    r.v2[4] = a4.v2; r.v2[5] = a5.v2; r.v2[6] = a6.v2; r.v2[7] = a7.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
    r.s[4] = a2.s[0]; r.s[5] = a2.s[1]; r.s[6] = a3.s[0]; r.s[7] = a3.s[1];
    r.s[8] = a4.s[0]; r.s[9] = a4.s[1]; r.s[10] = a5.s[0]; r.s[11] = a5.s[1];
    r.s[12] = a6.s[0]; r.s[13] = a6.s[1]; r.s[14] = a7.s[0]; r.s[15] = a7.s[1];
#endif // __CL_UCHAR2__
    return r;
}

/// Construct a 16-D uchar vector from a 4-D vector.
/// This 4-D vector will be replicated to all components of the returned vector.
inline cl_uchar16 uchar16(cl_uchar4 a)
{
    cl_uchar16 r;
#if defined( __CL_UCHAR4__ )
    r.v4[0] = a.v4; r.v4[1] = a.v4; r.v4[2] = a.v4; r.v4[3] = a.v4;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[2]; r.s[7] = a.s[3];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[2]; r.s[11] = a.s[3];
    r.s[12] = a.s[0]; r.s[13] = a.s[1]; r.s[14] = a.s[2]; r.s[15] = a.s[3];
#endif // __CL_UCHAR4__
    return r;
}

/// Construct a 16-D uchar vector from four 4-D vectors.
inline cl_uchar16 uchar16(cl_uchar4 a0, cl_uchar4 a1, cl_uchar4 a2, cl_uchar4 a3)
{
    cl_uchar16 r;
#if defined( __CL_UCHAR4__ )
    r.v4[0] = a0.v4; r.v4[1] = a1.v4; r.v4[2] = a2.v4; r.v4[3] = a3.v4;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a1.s[0]; r.s[5] = a1.s[1]; r.s[6] = a1.s[2]; r.s[7] = a1.s[3];
    r.s[8] = a2.s[0]; r.s[9] = a2.s[1]; r.s[10] = a2.s[2]; r.s[11] = a2.s[3];
    r.s[12] = a3.s[0]; r.s[13] = a3.s[1]; r.s[14] = a3.s[2]; r.s[15] = a3.s[3];
#endif // __CL_UCHAR4__
    return r;
}

/// Construct a 16-D uchar vector from an 8-D vector.
/// This 8-D vector will be replicated to all components of the returned vector.
inline cl_uchar16 uchar16(cl_uchar8 a)
{
    cl_uchar16 r;
#if defined( __CL_UCHAR8__ )
    r.v8[0] = a.v8; r.v8[1] = a.v8;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[4]; r.s[5] = a.s[5]; r.s[6] = a.s[6]; r.s[7] = a.s[7];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[2]; r.s[11] = a.s[3];
    r.s[12] = a.s[4]; r.s[13] = a.s[5]; r.s[14] = a.s[6]; r.s[15] = a.s[7];
#endif // __CL_UCHAR8__
    return r;
}

/// Construct a 16-D uchar vector from two 8-D vectors.
inline cl_uchar16 uchar16(cl_uchar8 a0, cl_uchar8 a1)
{
    cl_uchar16 r;
#if defined( __CL_UCHAR8__ )
    r.v8[0] = a0.v8; r.v8[1] = a1.v8;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a0.s[4]; r.s[5] = a0.s[5]; r.s[6] = a0.s[6]; r.s[7] = a0.s[7];
    r.s[8] = a1.s[0]; r.s[9] = a1.s[1]; r.s[10] = a1.s[2]; r.s[11] = a1.s[3];
    r.s[12] = a1.s[4]; r.s[13] = a1.s[5]; r.s[14] = a1.s[6]; r.s[15] = a1.s[7];
#endif // __CL_UCHAR8__
    return r;
}

/// Construct a 2-D short vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_short2 short2(cl_short a)
{
    cl_short2 r;
    r.s[0] = a; r.s[1] = a;
    return r;
}

/// Construct a 2-D short vector from two elements.
inline cl_short2 short2(cl_short a0, cl_short a1)
{
    cl_short2 r;
    r.s[0] = a0; r.s[1] = a1;
    return r;
}

/// Construct a 4-D short vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_short4 short4(cl_short a)
{
    cl_short4 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    return r;
}

/// Construct a 4-D short vector from four elements.
inline cl_short4 short4(cl_short a0, cl_short a1, cl_short a2, cl_short a3)
{
    cl_short4 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    return r;
}

/// Construct a 4-D short vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_short4 short4(cl_short2 a)
{
    cl_short4 r;
#if defined( __CL_SHORT2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
#endif // __CL_SHORT2__
    return r;
}

/// Construct a 4-D short vector from two 2-D vectors.
inline cl_short4 short4(cl_short2 a0, cl_short2 a1)
{
    cl_short4 r;
#if defined( __CL_SHORT2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
#endif // __CL_SHORT2__
    return r;
}

/// Construct an 8-D short vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_short8 short8(cl_short a)
{
    cl_short8 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    r.s[4] = a; r.s[5] = a; r.s[6] = a; r.s[7] = a;
    return r;
}

/// Construct an 8-D short vector from eight elements.
inline cl_short8 short8(cl_short a0, cl_short a1, cl_short a2, cl_short a3, cl_short a4, cl_short a5, cl_short a6, cl_short a7)
{
    cl_short8 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    r.s[4] = a4; r.s[5] = a5; r.s[6] = a6; r.s[7] = a7;
    return r;
}

/// Construct an 8-D short vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_short8 short8(cl_short2 a)
{
    cl_short8 r;
#if defined( __CL_SHORT2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2; r.v2[2] = a.v2; r.v2[3] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[0]; r.s[7] = a.s[1];
#endif // __CL_SHORT2__
    return r;
}

/// Construct an 8-D short vector from four 2-D vectors.
inline cl_short8 short8(cl_short2 a0, cl_short2 a1, cl_short2 a2, cl_short2 a3)
{
    cl_short8 r;
#if defined( __CL_SHORT2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2; r.v2[2] = a2.v2; r.v2[3] = a3.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
    r.s[4] = a2.s[0]; r.s[5] = a2.s[1]; r.s[6] = a3.s[0]; r.s[7] = a3.s[1];
#endif // __CL_SHORT2__
    return r;
}

/// Construct an 8-D short vector from a 4-D vector.
/// This 4-D vector will be replicated to all components of the returned vector.
inline cl_short8 short8(cl_short4 a)
{
    cl_short8 r;
#if defined( __CL_SHORT4__ )
    r.v4[0] = a.v4; r.v4[1] = a.v4;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[2]; r.s[7] = a.s[3];
#endif // __CL_SHORT4__
    return r;
}

/// Construct an 8-D short vector from two 4-D vectors.
inline cl_short8 short8(cl_short4 a0, cl_short4 a1)
{
    cl_short8 r;
#if defined( __CL_SHORT4__ )
    r.v4[0] = a0.v4; r.v4[1] = a1.v4;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a1.s[0]; r.s[5] = a1.s[1]; r.s[6] = a1.s[2]; r.s[7] = a1.s[3];
#endif // __CL_SHORT4__
    return r;
}

/// Construct a 16-D short vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_short16 short16(cl_short a)
{
    cl_short16 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    r.s[4] = a; r.s[5] = a; r.s[6] = a; r.s[7] = a;
    r.s[8] = a; r.s[9] = a; r.s[10] = a; r.s[11] = a;
    r.s[12] = a; r.s[13] = a; r.s[14] = a; r.s[15] = a;
    return r;
}

/// Construct a 16-D short vector from sixteen elements.
inline cl_short16 short16(cl_short a0, cl_short a1, cl_short a2, cl_short a3, cl_short a4, cl_short a5, cl_short a6, cl_short a7, cl_short a8, cl_short a9, cl_short a10, cl_short a11, cl_short a12, cl_short a13, cl_short a14, cl_short a15)
{
    cl_short16 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    r.s[4] = a4; r.s[5] = a5; r.s[6] = a6; r.s[7] = a7;
    r.s[8] = a8; r.s[9] = a9; r.s[10] = a10; r.s[11] = a11;
    r.s[12] = a12; r.s[13] = a13; r.s[14] = a14; r.s[15] = a15;
    return r;
}

/// Construct a 16-D short vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_short16 short16(cl_short2 a)
{
    cl_short16 r;
#if defined( __CL_SHORT2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2; r.v2[2] = a.v2; r.v2[3] = a.v2;
    r.v2[4] = a.v2; r.v2[5] = a.v2; r.v2[6] = a.v2; r.v2[7] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[0]; r.s[7] = a.s[1];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[0]; r.s[11] = a.s[1];
    r.s[12] = a.s[0]; r.s[13] = a.s[1]; r.s[14] = a.s[0]; r.s[15] = a.s[1];
#endif // __CL_SHORT2__
    return r;
}

/// Construct a 16-D short vector from eight 2-D vectors.
inline cl_short16 short16(cl_short2 a0, cl_short2 a1, cl_short2 a2, cl_short2 a3, cl_short2 a4, cl_short2 a5, cl_short2 a6, cl_short2 a7)
{
    cl_short16 r;
#if defined( __CL_SHORT2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2; r.v2[2] = a2.v2; r.v2[3] = a3.v2;
    r.v2[4] = a4.v2; r.v2[5] = a5.v2; r.v2[6] = a6.v2; r.v2[7] = a7.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
    r.s[4] = a2.s[0]; r.s[5] = a2.s[1]; r.s[6] = a3.s[0]; r.s[7] = a3.s[1];
    r.s[8] = a4.s[0]; r.s[9] = a4.s[1]; r.s[10] = a5.s[0]; r.s[11] = a5.s[1];
    r.s[12] = a6.s[0]; r.s[13] = a6.s[1]; r.s[14] = a7.s[0]; r.s[15] = a7.s[1];
#endif // __CL_SHORT2__
    return r;
}

/// Construct a 16-D short vector from a 4-D vector.
/// This 4-D vector will be replicated to all components of the returned vector.
inline cl_short16 short16(cl_short4 a)
{
    cl_short16 r;
#if defined( __CL_SHORT4__ )
    r.v4[0] = a.v4; r.v4[1] = a.v4; r.v4[2] = a.v4; r.v4[3] = a.v4;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[2]; r.s[7] = a.s[3];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[2]; r.s[11] = a.s[3];
    r.s[12] = a.s[0]; r.s[13] = a.s[1]; r.s[14] = a.s[2]; r.s[15] = a.s[3];
#endif // __CL_SHORT4__
    return r;
}

/// Construct a 16-D short vector from four 4-D vectors.
inline cl_short16 short16(cl_short4 a0, cl_short4 a1, cl_short4 a2, cl_short4 a3)
{
    cl_short16 r;
#if defined( __CL_SHORT4__ )
    r.v4[0] = a0.v4; r.v4[1] = a1.v4; r.v4[2] = a2.v4; r.v4[3] = a3.v4;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a1.s[0]; r.s[5] = a1.s[1]; r.s[6] = a1.s[2]; r.s[7] = a1.s[3];
    r.s[8] = a2.s[0]; r.s[9] = a2.s[1]; r.s[10] = a2.s[2]; r.s[11] = a2.s[3];
    r.s[12] = a3.s[0]; r.s[13] = a3.s[1]; r.s[14] = a3.s[2]; r.s[15] = a3.s[3];
#endif // __CL_SHORT4__
    return r;
}

/// Construct a 16-D short vector from an 8-D vector.
/// This 8-D vector will be replicated to all components of the returned vector.
inline cl_short16 short16(cl_short8 a)
{
    cl_short16 r;
#if defined( __CL_SHORT8__ )
    r.v8[0] = a.v8; r.v8[1] = a.v8;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[4]; r.s[5] = a.s[5]; r.s[6] = a.s[6]; r.s[7] = a.s[7];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[2]; r.s[11] = a.s[3];
    r.s[12] = a.s[4]; r.s[13] = a.s[5]; r.s[14] = a.s[6]; r.s[15] = a.s[7];
#endif // __CL_SHORT8__
    return r;
}

/// Construct a 16-D short vector from two 8-D vectors.
inline cl_short16 short16(cl_short8 a0, cl_short8 a1)
{
    cl_short16 r;
#if defined( __CL_SHORT8__ )
    r.v8[0] = a0.v8; r.v8[1] = a1.v8;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a0.s[4]; r.s[5] = a0.s[5]; r.s[6] = a0.s[6]; r.s[7] = a0.s[7];
    r.s[8] = a1.s[0]; r.s[9] = a1.s[1]; r.s[10] = a1.s[2]; r.s[11] = a1.s[3];
    r.s[12] = a1.s[4]; r.s[13] = a1.s[5]; r.s[14] = a1.s[6]; r.s[15] = a1.s[7];
#endif // __CL_SHORT8__
    return r;
}

/// Construct a 2-D ushort vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_ushort2 ushort2(cl_ushort a)
{
    cl_ushort2 r;
    r.s[0] = a; r.s[1] = a;
    return r;
}

/// Construct a 2-D ushort vector from two elements.
inline cl_ushort2 ushort2(cl_ushort a0, cl_ushort a1)
{
    cl_ushort2 r;
    r.s[0] = a0; r.s[1] = a1;
    return r;
}

/// Construct a 4-D ushort vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_ushort4 ushort4(cl_ushort a)
{
    cl_ushort4 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    return r;
}

/// Construct a 4-D ushort vector from four elements.
inline cl_ushort4 ushort4(cl_ushort a0, cl_ushort a1, cl_ushort a2, cl_ushort a3)
{
    cl_ushort4 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    return r;
}

/// Construct a 4-D ushort vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_ushort4 ushort4(cl_ushort2 a)
{
    cl_ushort4 r;
#if defined( __CL_USHORT2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
#endif // __CL_USHORT2__
    return r;
}

/// Construct a 4-D ushort vector from two 2-D vectors.
inline cl_ushort4 ushort4(cl_ushort2 a0, cl_ushort2 a1)
{
    cl_ushort4 r;
#if defined( __CL_USHORT2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
#endif // __CL_USHORT2__
    return r;
}

/// Construct an 8-D ushort vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_ushort8 ushort8(cl_ushort a)
{
    cl_ushort8 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    r.s[4] = a; r.s[5] = a; r.s[6] = a; r.s[7] = a;
    return r;
}

/// Construct an 8-D ushort vector from eight elements.
inline cl_ushort8 ushort8(cl_ushort a0, cl_ushort a1, cl_ushort a2, cl_ushort a3, cl_ushort a4, cl_ushort a5, cl_ushort a6, cl_ushort a7)
{
    cl_ushort8 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    r.s[4] = a4; r.s[5] = a5; r.s[6] = a6; r.s[7] = a7;
    return r;
}

/// Construct an 8-D ushort vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_ushort8 ushort8(cl_ushort2 a)
{
    cl_ushort8 r;
#if defined( __CL_USHORT2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2; r.v2[2] = a.v2; r.v2[3] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[0]; r.s[7] = a.s[1];
#endif // __CL_USHORT2__
    return r;
}

/// Construct an 8-D ushort vector from four 2-D vectors.
inline cl_ushort8 ushort8(cl_ushort2 a0, cl_ushort2 a1, cl_ushort2 a2, cl_ushort2 a3)
{
    cl_ushort8 r;
#if defined( __CL_USHORT2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2; r.v2[2] = a2.v2; r.v2[3] = a3.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
    r.s[4] = a2.s[0]; r.s[5] = a2.s[1]; r.s[6] = a3.s[0]; r.s[7] = a3.s[1];
#endif // __CL_USHORT2__
    return r;
}

/// Construct an 8-D ushort vector from a 4-D vector.
/// This 4-D vector will be replicated to all components of the returned vector.
inline cl_ushort8 ushort8(cl_ushort4 a)
{
    cl_ushort8 r;
#if defined( __CL_USHORT4__ )
    r.v4[0] = a.v4; r.v4[1] = a.v4;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[2]; r.s[7] = a.s[3];
#endif // __CL_USHORT4__
    return r;
}

/// Construct an 8-D ushort vector from two 4-D vectors.
inline cl_ushort8 ushort8(cl_ushort4 a0, cl_ushort4 a1)
{
    cl_ushort8 r;
#if defined( __CL_USHORT4__ )
    r.v4[0] = a0.v4; r.v4[1] = a1.v4;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a1.s[0]; r.s[5] = a1.s[1]; r.s[6] = a1.s[2]; r.s[7] = a1.s[3];
#endif // __CL_USHORT4__
    return r;
}

/// Construct a 16-D ushort vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_ushort16 ushort16(cl_ushort a)
{
    cl_ushort16 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    r.s[4] = a; r.s[5] = a; r.s[6] = a; r.s[7] = a;
    r.s[8] = a; r.s[9] = a; r.s[10] = a; r.s[11] = a;
    r.s[12] = a; r.s[13] = a; r.s[14] = a; r.s[15] = a;
    return r;
}

/// Construct a 16-D ushort vector from sixteen elements.
inline cl_ushort16 ushort16(cl_ushort a0, cl_ushort a1, cl_ushort a2, cl_ushort a3, cl_ushort a4, cl_ushort a5, cl_ushort a6, cl_ushort a7, cl_ushort a8, cl_ushort a9, cl_ushort a10, cl_ushort a11, cl_ushort a12, cl_ushort a13, cl_ushort a14, cl_ushort a15)
{
    cl_ushort16 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    r.s[4] = a4; r.s[5] = a5; r.s[6] = a6; r.s[7] = a7;
    r.s[8] = a8; r.s[9] = a9; r.s[10] = a10; r.s[11] = a11;
    r.s[12] = a12; r.s[13] = a13; r.s[14] = a14; r.s[15] = a15;
    return r;
}

/// Construct a 16-D ushort vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_ushort16 ushort16(cl_ushort2 a)
{
    cl_ushort16 r;
#if defined( __CL_USHORT2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2; r.v2[2] = a.v2; r.v2[3] = a.v2;
    r.v2[4] = a.v2; r.v2[5] = a.v2; r.v2[6] = a.v2; r.v2[7] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[0]; r.s[7] = a.s[1];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[0]; r.s[11] = a.s[1];
    r.s[12] = a.s[0]; r.s[13] = a.s[1]; r.s[14] = a.s[0]; r.s[15] = a.s[1];
#endif // __CL_USHORT2__
    return r;
}

/// Construct a 16-D ushort vector from eight 2-D vectors.
inline cl_ushort16 ushort16(cl_ushort2 a0, cl_ushort2 a1, cl_ushort2 a2, cl_ushort2 a3, cl_ushort2 a4, cl_ushort2 a5, cl_ushort2 a6, cl_ushort2 a7)
{
    cl_ushort16 r;
#if defined( __CL_USHORT2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2; r.v2[2] = a2.v2; r.v2[3] = a3.v2;
    r.v2[4] = a4.v2; r.v2[5] = a5.v2; r.v2[6] = a6.v2; r.v2[7] = a7.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
    r.s[4] = a2.s[0]; r.s[5] = a2.s[1]; r.s[6] = a3.s[0]; r.s[7] = a3.s[1];
    r.s[8] = a4.s[0]; r.s[9] = a4.s[1]; r.s[10] = a5.s[0]; r.s[11] = a5.s[1];
    r.s[12] = a6.s[0]; r.s[13] = a6.s[1]; r.s[14] = a7.s[0]; r.s[15] = a7.s[1];
#endif // __CL_USHORT2__
    return r;
}

/// Construct a 16-D ushort vector from a 4-D vector.
/// This 4-D vector will be replicated to all components of the returned vector.
inline cl_ushort16 ushort16(cl_ushort4 a)
{
    cl_ushort16 r;
#if defined( __CL_USHORT4__ )
    r.v4[0] = a.v4; r.v4[1] = a.v4; r.v4[2] = a.v4; r.v4[3] = a.v4;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[2]; r.s[7] = a.s[3];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[2]; r.s[11] = a.s[3];
    r.s[12] = a.s[0]; r.s[13] = a.s[1]; r.s[14] = a.s[2]; r.s[15] = a.s[3];
#endif // __CL_USHORT4__
    return r;
}

/// Construct a 16-D ushort vector from four 4-D vectors.
inline cl_ushort16 ushort16(cl_ushort4 a0, cl_ushort4 a1, cl_ushort4 a2, cl_ushort4 a3)
{
    cl_ushort16 r;
#if defined( __CL_USHORT4__ )
    r.v4[0] = a0.v4; r.v4[1] = a1.v4; r.v4[2] = a2.v4; r.v4[3] = a3.v4;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a1.s[0]; r.s[5] = a1.s[1]; r.s[6] = a1.s[2]; r.s[7] = a1.s[3];
    r.s[8] = a2.s[0]; r.s[9] = a2.s[1]; r.s[10] = a2.s[2]; r.s[11] = a2.s[3];
    r.s[12] = a3.s[0]; r.s[13] = a3.s[1]; r.s[14] = a3.s[2]; r.s[15] = a3.s[3];
#endif // __CL_USHORT4__
    return r;
}

/// Construct a 16-D ushort vector from an 8-D vector.
/// This 8-D vector will be replicated to all components of the returned vector.
inline cl_ushort16 ushort16(cl_ushort8 a)
{
    cl_ushort16 r;
#if defined( __CL_USHORT8__ )
    r.v8[0] = a.v8; r.v8[1] = a.v8;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[4]; r.s[5] = a.s[5]; r.s[6] = a.s[6]; r.s[7] = a.s[7];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[2]; r.s[11] = a.s[3];
    r.s[12] = a.s[4]; r.s[13] = a.s[5]; r.s[14] = a.s[6]; r.s[15] = a.s[7];
#endif // __CL_USHORT8__
    return r;
}

/// Construct a 16-D ushort vector from two 8-D vectors.
inline cl_ushort16 ushort16(cl_ushort8 a0, cl_ushort8 a1)
{
    cl_ushort16 r;
#if defined( __CL_USHORT8__ )
    r.v8[0] = a0.v8; r.v8[1] = a1.v8;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a0.s[4]; r.s[5] = a0.s[5]; r.s[6] = a0.s[6]; r.s[7] = a0.s[7];
    r.s[8] = a1.s[0]; r.s[9] = a1.s[1]; r.s[10] = a1.s[2]; r.s[11] = a1.s[3];
    r.s[12] = a1.s[4]; r.s[13] = a1.s[5]; r.s[14] = a1.s[6]; r.s[15] = a1.s[7];
#endif // __CL_USHORT8__
    return r;
}

/// Construct a 2-D int vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_int2 int2(cl_int a)
{
    cl_int2 r;
    r.s[0] = a; r.s[1] = a;
    return r;
}

/// Construct a 2-D int vector from two elements.
inline cl_int2 int2(cl_int a0, cl_int a1)
{
    cl_int2 r;
    r.s[0] = a0; r.s[1] = a1;
    return r;
}

/// Construct a 4-D int vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_int4 int4(cl_int a)
{
    cl_int4 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    return r;
}

/// Construct a 4-D int vector from four elements.
inline cl_int4 int4(cl_int a0, cl_int a1, cl_int a2, cl_int a3)
{
    cl_int4 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    return r;
}

/// Construct a 4-D int vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_int4 int4(cl_int2 a)
{
    cl_int4 r;
#if defined( __CL_INT2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
#endif // __CL_INT2__
    return r;
}

/// Construct a 4-D int vector from two 2-D vectors.
inline cl_int4 int4(cl_int2 a0, cl_int2 a1)
{
    cl_int4 r;
#if defined( __CL_INT2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
#endif // __CL_INT2__
    return r;
}

/// Construct an 8-D int vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_int8 int8(cl_int a)
{
    cl_int8 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    r.s[4] = a; r.s[5] = a; r.s[6] = a; r.s[7] = a;
    return r;
}

/// Construct an 8-D int vector from eight elements.
inline cl_int8 int8(cl_int a0, cl_int a1, cl_int a2, cl_int a3, cl_int a4, cl_int a5, cl_int a6, cl_int a7)
{
    cl_int8 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    r.s[4] = a4; r.s[5] = a5; r.s[6] = a6; r.s[7] = a7;
    return r;
}

/// Construct an 8-D int vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_int8 int8(cl_int2 a)
{
    cl_int8 r;
#if defined( __CL_INT2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2; r.v2[2] = a.v2; r.v2[3] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[0]; r.s[7] = a.s[1];
#endif // __CL_INT2__
    return r;
}

/// Construct an 8-D int vector from four 2-D vectors.
inline cl_int8 int8(cl_int2 a0, cl_int2 a1, cl_int2 a2, cl_int2 a3)
{
    cl_int8 r;
#if defined( __CL_INT2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2; r.v2[2] = a2.v2; r.v2[3] = a3.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
    r.s[4] = a2.s[0]; r.s[5] = a2.s[1]; r.s[6] = a3.s[0]; r.s[7] = a3.s[1];
#endif // __CL_INT2__
    return r;
}

/// Construct an 8-D int vector from a 4-D vector.
/// This 4-D vector will be replicated to all components of the returned vector.
inline cl_int8 int8(cl_int4 a)
{
    cl_int8 r;
#if defined( __CL_INT4__ )
    r.v4[0] = a.v4; r.v4[1] = a.v4;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[2]; r.s[7] = a.s[3];
#endif // __CL_INT4__
    return r;
}

/// Construct an 8-D int vector from two 4-D vectors.
inline cl_int8 int8(cl_int4 a0, cl_int4 a1)
{
    cl_int8 r;
#if defined( __CL_INT4__ )
    r.v4[0] = a0.v4; r.v4[1] = a1.v4;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a1.s[0]; r.s[5] = a1.s[1]; r.s[6] = a1.s[2]; r.s[7] = a1.s[3];
#endif // __CL_INT4__
    return r;
}

/// Construct a 16-D int vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_int16 int16(cl_int a)
{
    cl_int16 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    r.s[4] = a; r.s[5] = a; r.s[6] = a; r.s[7] = a;
    r.s[8] = a; r.s[9] = a; r.s[10] = a; r.s[11] = a;
    r.s[12] = a; r.s[13] = a; r.s[14] = a; r.s[15] = a;
    return r;
}

/// Construct a 16-D int vector from sixteen elements.
inline cl_int16 int16(cl_int a0, cl_int a1, cl_int a2, cl_int a3, cl_int a4, cl_int a5, cl_int a6, cl_int a7, cl_int a8, cl_int a9, cl_int a10, cl_int a11, cl_int a12, cl_int a13, cl_int a14, cl_int a15)
{
    cl_int16 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    r.s[4] = a4; r.s[5] = a5; r.s[6] = a6; r.s[7] = a7;
    r.s[8] = a8; r.s[9] = a9; r.s[10] = a10; r.s[11] = a11;
    r.s[12] = a12; r.s[13] = a13; r.s[14] = a14; r.s[15] = a15;
    return r;
}

/// Construct a 16-D int vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_int16 int16(cl_int2 a)
{
    cl_int16 r;
#if defined( __CL_INT2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2; r.v2[2] = a.v2; r.v2[3] = a.v2;
    r.v2[4] = a.v2; r.v2[5] = a.v2; r.v2[6] = a.v2; r.v2[7] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[0]; r.s[7] = a.s[1];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[0]; r.s[11] = a.s[1];
    r.s[12] = a.s[0]; r.s[13] = a.s[1]; r.s[14] = a.s[0]; r.s[15] = a.s[1];
#endif // __CL_INT2__
    return r;
}

/// Construct a 16-D int vector from eight 2-D vectors.
inline cl_int16 int16(cl_int2 a0, cl_int2 a1, cl_int2 a2, cl_int2 a3, cl_int2 a4, cl_int2 a5, cl_int2 a6, cl_int2 a7)
{
    cl_int16 r;
#if defined( __CL_INT2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2; r.v2[2] = a2.v2; r.v2[3] = a3.v2;
    r.v2[4] = a4.v2; r.v2[5] = a5.v2; r.v2[6] = a6.v2; r.v2[7] = a7.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
    r.s[4] = a2.s[0]; r.s[5] = a2.s[1]; r.s[6] = a3.s[0]; r.s[7] = a3.s[1];
    r.s[8] = a4.s[0]; r.s[9] = a4.s[1]; r.s[10] = a5.s[0]; r.s[11] = a5.s[1];
    r.s[12] = a6.s[0]; r.s[13] = a6.s[1]; r.s[14] = a7.s[0]; r.s[15] = a7.s[1];
#endif // __CL_INT2__
    return r;
}

/// Construct a 16-D int vector from a 4-D vector.
/// This 4-D vector will be replicated to all components of the returned vector.
inline cl_int16 int16(cl_int4 a)
{
    cl_int16 r;
#if defined( __CL_INT4__ )
    r.v4[0] = a.v4; r.v4[1] = a.v4; r.v4[2] = a.v4; r.v4[3] = a.v4;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[2]; r.s[7] = a.s[3];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[2]; r.s[11] = a.s[3];
    r.s[12] = a.s[0]; r.s[13] = a.s[1]; r.s[14] = a.s[2]; r.s[15] = a.s[3];
#endif // __CL_INT4__
    return r;
}

/// Construct a 16-D int vector from four 4-D vectors.
inline cl_int16 int16(cl_int4 a0, cl_int4 a1, cl_int4 a2, cl_int4 a3)
{
    cl_int16 r;
#if defined( __CL_INT4__ )
    r.v4[0] = a0.v4; r.v4[1] = a1.v4; r.v4[2] = a2.v4; r.v4[3] = a3.v4;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a1.s[0]; r.s[5] = a1.s[1]; r.s[6] = a1.s[2]; r.s[7] = a1.s[3];
    r.s[8] = a2.s[0]; r.s[9] = a2.s[1]; r.s[10] = a2.s[2]; r.s[11] = a2.s[3];
    r.s[12] = a3.s[0]; r.s[13] = a3.s[1]; r.s[14] = a3.s[2]; r.s[15] = a3.s[3];
#endif // __CL_INT4__
    return r;
}

/// Construct a 16-D int vector from an 8-D vector.
/// This 8-D vector will be replicated to all components of the returned vector.
inline cl_int16 int16(cl_int8 a)
{
    cl_int16 r;
#if defined( __CL_INT8__ )
    r.v8[0] = a.v8; r.v8[1] = a.v8;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[4]; r.s[5] = a.s[5]; r.s[6] = a.s[6]; r.s[7] = a.s[7];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[2]; r.s[11] = a.s[3];
    r.s[12] = a.s[4]; r.s[13] = a.s[5]; r.s[14] = a.s[6]; r.s[15] = a.s[7];
#endif // __CL_INT8__
    return r;
}

/// Construct a 16-D int vector from two 8-D vectors.
inline cl_int16 int16(cl_int8 a0, cl_int8 a1)
{
    cl_int16 r;
#if defined( __CL_INT8__ )
    r.v8[0] = a0.v8; r.v8[1] = a1.v8;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a0.s[4]; r.s[5] = a0.s[5]; r.s[6] = a0.s[6]; r.s[7] = a0.s[7];
    r.s[8] = a1.s[0]; r.s[9] = a1.s[1]; r.s[10] = a1.s[2]; r.s[11] = a1.s[3];
    r.s[12] = a1.s[4]; r.s[13] = a1.s[5]; r.s[14] = a1.s[6]; r.s[15] = a1.s[7];
#endif // __CL_INT8__
    return r;
}

/// Construct a 2-D uint vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_uint2 uint2(cl_uint a)
{
    cl_uint2 r;
    r.s[0] = a; r.s[1] = a;
    return r;
}

/// Construct a 2-D uint vector from two elements.
inline cl_uint2 uint2(cl_uint a0, cl_uint a1)
{
    cl_uint2 r;
    r.s[0] = a0; r.s[1] = a1;
    return r;
}

/// Construct a 4-D uint vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_uint4 uint4(cl_uint a)
{
    cl_uint4 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    return r;
}

/// Construct a 4-D uint vector from four elements.
inline cl_uint4 uint4(cl_uint a0, cl_uint a1, cl_uint a2, cl_uint a3)
{
    cl_uint4 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    return r;
}

/// Construct a 4-D uint vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_uint4 uint4(cl_uint2 a)
{
    cl_uint4 r;
#if defined( __CL_UINT2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
#endif // __CL_UINT2__
    return r;
}

/// Construct a 4-D uint vector from two 2-D vectors.
inline cl_uint4 uint4(cl_uint2 a0, cl_uint2 a1)
{
    cl_uint4 r;
#if defined( __CL_UINT2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
#endif // __CL_UINT2__
    return r;
}

/// Construct an 8-D uint vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_uint8 uint8(cl_uint a)
{
    cl_uint8 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    r.s[4] = a; r.s[5] = a; r.s[6] = a; r.s[7] = a;
    return r;
}

/// Construct an 8-D uint vector from eight elements.
inline cl_uint8 uint8(cl_uint a0, cl_uint a1, cl_uint a2, cl_uint a3, cl_uint a4, cl_uint a5, cl_uint a6, cl_uint a7)
{
    cl_uint8 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    r.s[4] = a4; r.s[5] = a5; r.s[6] = a6; r.s[7] = a7;
    return r;
}

/// Construct an 8-D uint vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_uint8 uint8(cl_uint2 a)
{
    cl_uint8 r;
#if defined( __CL_UINT2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2; r.v2[2] = a.v2; r.v2[3] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[0]; r.s[7] = a.s[1];
#endif // __CL_UINT2__
    return r;
}

/// Construct an 8-D uint vector from four 2-D vectors.
inline cl_uint8 uint8(cl_uint2 a0, cl_uint2 a1, cl_uint2 a2, cl_uint2 a3)
{
    cl_uint8 r;
#if defined( __CL_UINT2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2; r.v2[2] = a2.v2; r.v2[3] = a3.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
    r.s[4] = a2.s[0]; r.s[5] = a2.s[1]; r.s[6] = a3.s[0]; r.s[7] = a3.s[1];
#endif // __CL_UINT2__
    return r;
}

/// Construct an 8-D uint vector from a 4-D vector.
/// This 4-D vector will be replicated to all components of the returned vector.
inline cl_uint8 uint8(cl_uint4 a)
{
    cl_uint8 r;
#if defined( __CL_UINT4__ )
    r.v4[0] = a.v4; r.v4[1] = a.v4;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[2]; r.s[7] = a.s[3];
#endif // __CL_UINT4__
    return r;
}

/// Construct an 8-D uint vector from two 4-D vectors.
inline cl_uint8 uint8(cl_uint4 a0, cl_uint4 a1)
{
    cl_uint8 r;
#if defined( __CL_UINT4__ )
    r.v4[0] = a0.v4; r.v4[1] = a1.v4;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a1.s[0]; r.s[5] = a1.s[1]; r.s[6] = a1.s[2]; r.s[7] = a1.s[3];
#endif // __CL_UINT4__
    return r;
}

/// Construct a 16-D uint vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_uint16 uint16(cl_uint a)
{
    cl_uint16 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    r.s[4] = a; r.s[5] = a; r.s[6] = a; r.s[7] = a;
    r.s[8] = a; r.s[9] = a; r.s[10] = a; r.s[11] = a;
    r.s[12] = a; r.s[13] = a; r.s[14] = a; r.s[15] = a;
    return r;
}

/// Construct a 16-D uint vector from sixteen elements.
inline cl_uint16 uint16(cl_uint a0, cl_uint a1, cl_uint a2, cl_uint a3, cl_uint a4, cl_uint a5, cl_uint a6, cl_uint a7, cl_uint a8, cl_uint a9, cl_uint a10, cl_uint a11, cl_uint a12, cl_uint a13, cl_uint a14, cl_uint a15)
{
    cl_uint16 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    r.s[4] = a4; r.s[5] = a5; r.s[6] = a6; r.s[7] = a7;
    r.s[8] = a8; r.s[9] = a9; r.s[10] = a10; r.s[11] = a11;
    r.s[12] = a12; r.s[13] = a13; r.s[14] = a14; r.s[15] = a15;
    return r;
}

/// Construct a 16-D uint vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_uint16 uint16(cl_uint2 a)
{
    cl_uint16 r;
#if defined( __CL_UINT2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2; r.v2[2] = a.v2; r.v2[3] = a.v2;
    r.v2[4] = a.v2; r.v2[5] = a.v2; r.v2[6] = a.v2; r.v2[7] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[0]; r.s[7] = a.s[1];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[0]; r.s[11] = a.s[1];
    r.s[12] = a.s[0]; r.s[13] = a.s[1]; r.s[14] = a.s[0]; r.s[15] = a.s[1];
#endif // __CL_UINT2__
    return r;
}

/// Construct a 16-D uint vector from eight 2-D vectors.
inline cl_uint16 uint16(cl_uint2 a0, cl_uint2 a1, cl_uint2 a2, cl_uint2 a3, cl_uint2 a4, cl_uint2 a5, cl_uint2 a6, cl_uint2 a7)
{
    cl_uint16 r;
#if defined( __CL_UINT2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2; r.v2[2] = a2.v2; r.v2[3] = a3.v2;
    r.v2[4] = a4.v2; r.v2[5] = a5.v2; r.v2[6] = a6.v2; r.v2[7] = a7.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
    r.s[4] = a2.s[0]; r.s[5] = a2.s[1]; r.s[6] = a3.s[0]; r.s[7] = a3.s[1];
    r.s[8] = a4.s[0]; r.s[9] = a4.s[1]; r.s[10] = a5.s[0]; r.s[11] = a5.s[1];
    r.s[12] = a6.s[0]; r.s[13] = a6.s[1]; r.s[14] = a7.s[0]; r.s[15] = a7.s[1];
#endif // __CL_UINT2__
    return r;
}

/// Construct a 16-D uint vector from a 4-D vector.
/// This 4-D vector will be replicated to all components of the returned vector.
inline cl_uint16 uint16(cl_uint4 a)
{
    cl_uint16 r;
#if defined( __CL_UINT4__ )
    r.v4[0] = a.v4; r.v4[1] = a.v4; r.v4[2] = a.v4; r.v4[3] = a.v4;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[2]; r.s[7] = a.s[3];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[2]; r.s[11] = a.s[3];
    r.s[12] = a.s[0]; r.s[13] = a.s[1]; r.s[14] = a.s[2]; r.s[15] = a.s[3];
#endif // __CL_UINT4__
    return r;
}

/// Construct a 16-D uint vector from four 4-D vectors.
inline cl_uint16 uint16(cl_uint4 a0, cl_uint4 a1, cl_uint4 a2, cl_uint4 a3)
{
    cl_uint16 r;
#if defined( __CL_UINT4__ )
    r.v4[0] = a0.v4; r.v4[1] = a1.v4; r.v4[2] = a2.v4; r.v4[3] = a3.v4;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a1.s[0]; r.s[5] = a1.s[1]; r.s[6] = a1.s[2]; r.s[7] = a1.s[3];
    r.s[8] = a2.s[0]; r.s[9] = a2.s[1]; r.s[10] = a2.s[2]; r.s[11] = a2.s[3];
    r.s[12] = a3.s[0]; r.s[13] = a3.s[1]; r.s[14] = a3.s[2]; r.s[15] = a3.s[3];
#endif // __CL_UINT4__
    return r;
}

/// Construct a 16-D uint vector from an 8-D vector.
/// This 8-D vector will be replicated to all components of the returned vector.
inline cl_uint16 uint16(cl_uint8 a)
{
    cl_uint16 r;
#if defined( __CL_UINT8__ )
    r.v8[0] = a.v8; r.v8[1] = a.v8;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[4]; r.s[5] = a.s[5]; r.s[6] = a.s[6]; r.s[7] = a.s[7];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[2]; r.s[11] = a.s[3];
    r.s[12] = a.s[4]; r.s[13] = a.s[5]; r.s[14] = a.s[6]; r.s[15] = a.s[7];
#endif // __CL_UINT8__
    return r;
}

/// Construct a 16-D uint vector from two 8-D vectors.
inline cl_uint16 uint16(cl_uint8 a0, cl_uint8 a1)
{
    cl_uint16 r;
#if defined( __CL_UINT8__ )
    r.v8[0] = a0.v8; r.v8[1] = a1.v8;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a0.s[4]; r.s[5] = a0.s[5]; r.s[6] = a0.s[6]; r.s[7] = a0.s[7];
    r.s[8] = a1.s[0]; r.s[9] = a1.s[1]; r.s[10] = a1.s[2]; r.s[11] = a1.s[3];
    r.s[12] = a1.s[4]; r.s[13] = a1.s[5]; r.s[14] = a1.s[6]; r.s[15] = a1.s[7];
#endif // __CL_UINT8__
    return r;
}

/// Construct a 2-D long vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_long2 long2(cl_long a)
{
    cl_long2 r;
    r.s[0] = a; r.s[1] = a;
    return r;
}

/// Construct a 2-D long vector from two elements.
inline cl_long2 long2(cl_long a0, cl_long a1)
{
    cl_long2 r;
    r.s[0] = a0; r.s[1] = a1;
    return r;
}

/// Construct a 4-D long vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_long4 long4(cl_long a)
{
    cl_long4 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    return r;
}

/// Construct a 4-D long vector from four elements.
inline cl_long4 long4(cl_long a0, cl_long a1, cl_long a2, cl_long a3)
{
    cl_long4 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    return r;
}

/// Construct a 4-D long vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_long4 long4(cl_long2 a)
{
    cl_long4 r;
#if defined( __CL_LONG2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
#endif // __CL_LONG2__
    return r;
}

/// Construct a 4-D long vector from two 2-D vectors.
inline cl_long4 long4(cl_long2 a0, cl_long2 a1)
{
    cl_long4 r;
#if defined( __CL_LONG2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
#endif // __CL_LONG2__
    return r;
}

/// Construct an 8-D long vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_long8 long8(cl_long a)
{
    cl_long8 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    r.s[4] = a; r.s[5] = a; r.s[6] = a; r.s[7] = a;
    return r;
}

/// Construct an 8-D long vector from eight elements.
inline cl_long8 long8(cl_long a0, cl_long a1, cl_long a2, cl_long a3, cl_long a4, cl_long a5, cl_long a6, cl_long a7)
{
    cl_long8 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    r.s[4] = a4; r.s[5] = a5; r.s[6] = a6; r.s[7] = a7;
    return r;
}

/// Construct an 8-D long vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_long8 long8(cl_long2 a)
{
    cl_long8 r;
#if defined( __CL_LONG2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2; r.v2[2] = a.v2; r.v2[3] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[0]; r.s[7] = a.s[1];
#endif // __CL_LONG2__
    return r;
}

/// Construct an 8-D long vector from four 2-D vectors.
inline cl_long8 long8(cl_long2 a0, cl_long2 a1, cl_long2 a2, cl_long2 a3)
{
    cl_long8 r;
#if defined( __CL_LONG2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2; r.v2[2] = a2.v2; r.v2[3] = a3.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
    r.s[4] = a2.s[0]; r.s[5] = a2.s[1]; r.s[6] = a3.s[0]; r.s[7] = a3.s[1];
#endif // __CL_LONG2__
    return r;
}

/// Construct an 8-D long vector from a 4-D vector.
/// This 4-D vector will be replicated to all components of the returned vector.
inline cl_long8 long8(cl_long4 a)
{
    cl_long8 r;
#if defined( __CL_LONG4__ )
    r.v4[0] = a.v4; r.v4[1] = a.v4;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[2]; r.s[7] = a.s[3];
#endif // __CL_LONG4__
    return r;
}

/// Construct an 8-D long vector from two 4-D vectors.
inline cl_long8 long8(cl_long4 a0, cl_long4 a1)
{
    cl_long8 r;
#if defined( __CL_LONG4__ )
    r.v4[0] = a0.v4; r.v4[1] = a1.v4;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a1.s[0]; r.s[5] = a1.s[1]; r.s[6] = a1.s[2]; r.s[7] = a1.s[3];
#endif // __CL_LONG4__
    return r;
}

/// Construct a 16-D long vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_long16 long16(cl_long a)
{
    cl_long16 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    r.s[4] = a; r.s[5] = a; r.s[6] = a; r.s[7] = a;
    r.s[8] = a; r.s[9] = a; r.s[10] = a; r.s[11] = a;
    r.s[12] = a; r.s[13] = a; r.s[14] = a; r.s[15] = a;
    return r;
}

/// Construct a 16-D long vector from sixteen elements.
inline cl_long16 long16(cl_long a0, cl_long a1, cl_long a2, cl_long a3, cl_long a4, cl_long a5, cl_long a6, cl_long a7, cl_long a8, cl_long a9, cl_long a10, cl_long a11, cl_long a12, cl_long a13, cl_long a14, cl_long a15)
{
    cl_long16 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    r.s[4] = a4; r.s[5] = a5; r.s[6] = a6; r.s[7] = a7;
    r.s[8] = a8; r.s[9] = a9; r.s[10] = a10; r.s[11] = a11;
    r.s[12] = a12; r.s[13] = a13; r.s[14] = a14; r.s[15] = a15;
    return r;
}

/// Construct a 16-D long vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_long16 long16(cl_long2 a)
{
    cl_long16 r;
#if defined( __CL_LONG2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2; r.v2[2] = a.v2; r.v2[3] = a.v2;
    r.v2[4] = a.v2; r.v2[5] = a.v2; r.v2[6] = a.v2; r.v2[7] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[0]; r.s[7] = a.s[1];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[0]; r.s[11] = a.s[1];
    r.s[12] = a.s[0]; r.s[13] = a.s[1]; r.s[14] = a.s[0]; r.s[15] = a.s[1];
#endif // __CL_LONG2__
    return r;
}

/// Construct a 16-D long vector from eight 2-D vectors.
inline cl_long16 long16(cl_long2 a0, cl_long2 a1, cl_long2 a2, cl_long2 a3, cl_long2 a4, cl_long2 a5, cl_long2 a6, cl_long2 a7)
{
    cl_long16 r;
#if defined( __CL_LONG2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2; r.v2[2] = a2.v2; r.v2[3] = a3.v2;
    r.v2[4] = a4.v2; r.v2[5] = a5.v2; r.v2[6] = a6.v2; r.v2[7] = a7.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
    r.s[4] = a2.s[0]; r.s[5] = a2.s[1]; r.s[6] = a3.s[0]; r.s[7] = a3.s[1];
    r.s[8] = a4.s[0]; r.s[9] = a4.s[1]; r.s[10] = a5.s[0]; r.s[11] = a5.s[1];
    r.s[12] = a6.s[0]; r.s[13] = a6.s[1]; r.s[14] = a7.s[0]; r.s[15] = a7.s[1];
#endif // __CL_LONG2__
    return r;
}

/// Construct a 16-D long vector from a 4-D vector.
/// This 4-D vector will be replicated to all components of the returned vector.
inline cl_long16 long16(cl_long4 a)
{
    cl_long16 r;
#if defined( __CL_LONG4__ )
    r.v4[0] = a.v4; r.v4[1] = a.v4; r.v4[2] = a.v4; r.v4[3] = a.v4;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[2]; r.s[7] = a.s[3];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[2]; r.s[11] = a.s[3];
    r.s[12] = a.s[0]; r.s[13] = a.s[1]; r.s[14] = a.s[2]; r.s[15] = a.s[3];
#endif // __CL_LONG4__
    return r;
}

/// Construct a 16-D long vector from four 4-D vectors.
inline cl_long16 long16(cl_long4 a0, cl_long4 a1, cl_long4 a2, cl_long4 a3)
{
    cl_long16 r;
#if defined( __CL_LONG4__ )
    r.v4[0] = a0.v4; r.v4[1] = a1.v4; r.v4[2] = a2.v4; r.v4[3] = a3.v4;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a1.s[0]; r.s[5] = a1.s[1]; r.s[6] = a1.s[2]; r.s[7] = a1.s[3];
    r.s[8] = a2.s[0]; r.s[9] = a2.s[1]; r.s[10] = a2.s[2]; r.s[11] = a2.s[3];
    r.s[12] = a3.s[0]; r.s[13] = a3.s[1]; r.s[14] = a3.s[2]; r.s[15] = a3.s[3];
#endif // __CL_LONG4__
    return r;
}

/// Construct a 16-D long vector from an 8-D vector.
/// This 8-D vector will be replicated to all components of the returned vector.
inline cl_long16 long16(cl_long8 a)
{
    cl_long16 r;
#if defined( __CL_LONG8__ )
    r.v8[0] = a.v8; r.v8[1] = a.v8;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[4]; r.s[5] = a.s[5]; r.s[6] = a.s[6]; r.s[7] = a.s[7];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[2]; r.s[11] = a.s[3];
    r.s[12] = a.s[4]; r.s[13] = a.s[5]; r.s[14] = a.s[6]; r.s[15] = a.s[7];
#endif // __CL_LONG8__
    return r;
}

/// Construct a 16-D long vector from two 8-D vectors.
inline cl_long16 long16(cl_long8 a0, cl_long8 a1)
{
    cl_long16 r;
#if defined( __CL_LONG8__ )
    r.v8[0] = a0.v8; r.v8[1] = a1.v8;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a0.s[4]; r.s[5] = a0.s[5]; r.s[6] = a0.s[6]; r.s[7] = a0.s[7];
    r.s[8] = a1.s[0]; r.s[9] = a1.s[1]; r.s[10] = a1.s[2]; r.s[11] = a1.s[3];
    r.s[12] = a1.s[4]; r.s[13] = a1.s[5]; r.s[14] = a1.s[6]; r.s[15] = a1.s[7];
#endif // __CL_LONG8__
    return r;
}

/// Construct a 2-D ulong vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_ulong2 ulong2(cl_ulong a)
{
    cl_ulong2 r;
    r.s[0] = a; r.s[1] = a;
    return r;
}

/// Construct a 2-D ulong vector from two elements.
inline cl_ulong2 ulong2(cl_ulong a0, cl_ulong a1)
{
    cl_ulong2 r;
    r.s[0] = a0; r.s[1] = a1;
    return r;
}

/// Construct a 4-D ulong vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_ulong4 ulong4(cl_ulong a)
{
    cl_ulong4 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    return r;
}

/// Construct a 4-D ulong vector from four elements.
inline cl_ulong4 ulong4(cl_ulong a0, cl_ulong a1, cl_ulong a2, cl_ulong a3)
{
    cl_ulong4 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    return r;
}

/// Construct a 4-D ulong vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_ulong4 ulong4(cl_ulong2 a)
{
    cl_ulong4 r;
#if defined( __CL_ULONG2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
#endif // __CL_ULONG2__
    return r;
}

/// Construct a 4-D ulong vector from two 2-D vectors.
inline cl_ulong4 ulong4(cl_ulong2 a0, cl_ulong2 a1)
{
    cl_ulong4 r;
#if defined( __CL_ULONG2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
#endif // __CL_ULONG2__
    return r;
}

/// Construct an 8-D ulong vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_ulong8 ulong8(cl_ulong a)
{
    cl_ulong8 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    r.s[4] = a; r.s[5] = a; r.s[6] = a; r.s[7] = a;
    return r;
}

/// Construct an 8-D ulong vector from eight elements.
inline cl_ulong8 ulong8(cl_ulong a0, cl_ulong a1, cl_ulong a2, cl_ulong a3, cl_ulong a4, cl_ulong a5, cl_ulong a6, cl_ulong a7)
{
    cl_ulong8 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    r.s[4] = a4; r.s[5] = a5; r.s[6] = a6; r.s[7] = a7;
    return r;
}

/// Construct an 8-D ulong vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_ulong8 ulong8(cl_ulong2 a)
{
    cl_ulong8 r;
#if defined( __CL_ULONG2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2; r.v2[2] = a.v2; r.v2[3] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[0]; r.s[7] = a.s[1];
#endif // __CL_ULONG2__
    return r;
}

/// Construct an 8-D ulong vector from four 2-D vectors.
inline cl_ulong8 ulong8(cl_ulong2 a0, cl_ulong2 a1, cl_ulong2 a2, cl_ulong2 a3)
{
    cl_ulong8 r;
#if defined( __CL_ULONG2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2; r.v2[2] = a2.v2; r.v2[3] = a3.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
    r.s[4] = a2.s[0]; r.s[5] = a2.s[1]; r.s[6] = a3.s[0]; r.s[7] = a3.s[1];
#endif // __CL_ULONG2__
    return r;
}

/// Construct an 8-D ulong vector from a 4-D vector.
/// This 4-D vector will be replicated to all components of the returned vector.
inline cl_ulong8 ulong8(cl_ulong4 a)
{
    cl_ulong8 r;
#if defined( __CL_ULONG4__ )
    r.v4[0] = a.v4; r.v4[1] = a.v4;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[2]; r.s[7] = a.s[3];
#endif // __CL_ULONG4__
    return r;
}

/// Construct an 8-D ulong vector from two 4-D vectors.
inline cl_ulong8 ulong8(cl_ulong4 a0, cl_ulong4 a1)
{
    cl_ulong8 r;
#if defined( __CL_ULONG4__ )
    r.v4[0] = a0.v4; r.v4[1] = a1.v4;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a1.s[0]; r.s[5] = a1.s[1]; r.s[6] = a1.s[2]; r.s[7] = a1.s[3];
#endif // __CL_ULONG4__
    return r;
}

/// Construct a 16-D ulong vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_ulong16 ulong16(cl_ulong a)
{
    cl_ulong16 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    r.s[4] = a; r.s[5] = a; r.s[6] = a; r.s[7] = a;
    r.s[8] = a; r.s[9] = a; r.s[10] = a; r.s[11] = a;
    r.s[12] = a; r.s[13] = a; r.s[14] = a; r.s[15] = a;
    return r;
}

/// Construct a 16-D ulong vector from sixteen elements.
inline cl_ulong16 ulong16(cl_ulong a0, cl_ulong a1, cl_ulong a2, cl_ulong a3, cl_ulong a4, cl_ulong a5, cl_ulong a6, cl_ulong a7, cl_ulong a8, cl_ulong a9, cl_ulong a10, cl_ulong a11, cl_ulong a12, cl_ulong a13, cl_ulong a14, cl_ulong a15)
{
    cl_ulong16 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    r.s[4] = a4; r.s[5] = a5; r.s[6] = a6; r.s[7] = a7;
    r.s[8] = a8; r.s[9] = a9; r.s[10] = a10; r.s[11] = a11;
    r.s[12] = a12; r.s[13] = a13; r.s[14] = a14; r.s[15] = a15;
    return r;
}

/// Construct a 16-D ulong vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_ulong16 ulong16(cl_ulong2 a)
{
    cl_ulong16 r;
#if defined( __CL_ULONG2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2; r.v2[2] = a.v2; r.v2[3] = a.v2;
    r.v2[4] = a.v2; r.v2[5] = a.v2; r.v2[6] = a.v2; r.v2[7] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[0]; r.s[7] = a.s[1];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[0]; r.s[11] = a.s[1];
    r.s[12] = a.s[0]; r.s[13] = a.s[1]; r.s[14] = a.s[0]; r.s[15] = a.s[1];
#endif // __CL_ULONG2__
    return r;
}

/// Construct a 16-D ulong vector from eight 2-D vectors.
inline cl_ulong16 ulong16(cl_ulong2 a0, cl_ulong2 a1, cl_ulong2 a2, cl_ulong2 a3, cl_ulong2 a4, cl_ulong2 a5, cl_ulong2 a6, cl_ulong2 a7)
{
    cl_ulong16 r;
#if defined( __CL_ULONG2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2; r.v2[2] = a2.v2; r.v2[3] = a3.v2;
    r.v2[4] = a4.v2; r.v2[5] = a5.v2; r.v2[6] = a6.v2; r.v2[7] = a7.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
    r.s[4] = a2.s[0]; r.s[5] = a2.s[1]; r.s[6] = a3.s[0]; r.s[7] = a3.s[1];
    r.s[8] = a4.s[0]; r.s[9] = a4.s[1]; r.s[10] = a5.s[0]; r.s[11] = a5.s[1];
    r.s[12] = a6.s[0]; r.s[13] = a6.s[1]; r.s[14] = a7.s[0]; r.s[15] = a7.s[1];
#endif // __CL_ULONG2__
    return r;
}

/// Construct a 16-D ulong vector from a 4-D vector.
/// This 4-D vector will be replicated to all components of the returned vector.
inline cl_ulong16 ulong16(cl_ulong4 a)
{
    cl_ulong16 r;
#if defined( __CL_ULONG4__ )
    r.v4[0] = a.v4; r.v4[1] = a.v4; r.v4[2] = a.v4; r.v4[3] = a.v4;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[2]; r.s[7] = a.s[3];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[2]; r.s[11] = a.s[3];
    r.s[12] = a.s[0]; r.s[13] = a.s[1]; r.s[14] = a.s[2]; r.s[15] = a.s[3];
#endif // __CL_ULONG4__
    return r;
}

/// Construct a 16-D ulong vector from four 4-D vectors.
inline cl_ulong16 ulong16(cl_ulong4 a0, cl_ulong4 a1, cl_ulong4 a2, cl_ulong4 a3)
{
    cl_ulong16 r;
#if defined( __CL_ULONG4__ )
    r.v4[0] = a0.v4; r.v4[1] = a1.v4; r.v4[2] = a2.v4; r.v4[3] = a3.v4;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a1.s[0]; r.s[5] = a1.s[1]; r.s[6] = a1.s[2]; r.s[7] = a1.s[3];
    r.s[8] = a2.s[0]; r.s[9] = a2.s[1]; r.s[10] = a2.s[2]; r.s[11] = a2.s[3];
    r.s[12] = a3.s[0]; r.s[13] = a3.s[1]; r.s[14] = a3.s[2]; r.s[15] = a3.s[3];
#endif // __CL_ULONG4__
    return r;
}

/// Construct a 16-D ulong vector from an 8-D vector.
/// This 8-D vector will be replicated to all components of the returned vector.
inline cl_ulong16 ulong16(cl_ulong8 a)
{
    cl_ulong16 r;
#if defined( __CL_ULONG8__ )
    r.v8[0] = a.v8; r.v8[1] = a.v8;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[4]; r.s[5] = a.s[5]; r.s[6] = a.s[6]; r.s[7] = a.s[7];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[2]; r.s[11] = a.s[3];
    r.s[12] = a.s[4]; r.s[13] = a.s[5]; r.s[14] = a.s[6]; r.s[15] = a.s[7];
#endif // __CL_ULONG8__
    return r;
}

/// Construct a 16-D ulong vector from two 8-D vectors.
inline cl_ulong16 ulong16(cl_ulong8 a0, cl_ulong8 a1)
{
    cl_ulong16 r;
#if defined( __CL_ULONG8__ )
    r.v8[0] = a0.v8; r.v8[1] = a1.v8;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a0.s[4]; r.s[5] = a0.s[5]; r.s[6] = a0.s[6]; r.s[7] = a0.s[7];
    r.s[8] = a1.s[0]; r.s[9] = a1.s[1]; r.s[10] = a1.s[2]; r.s[11] = a1.s[3];
    r.s[12] = a1.s[4]; r.s[13] = a1.s[5]; r.s[14] = a1.s[6]; r.s[15] = a1.s[7];
#endif // __CL_ULONG8__
    return r;
}

/// Construct a 2-D float vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_float2 float2(cl_float a)
{
    cl_float2 r;
    r.s[0] = a; r.s[1] = a;
    return r;
}

/// Construct a 2-D float vector from two elements.
inline cl_float2 float2(cl_float a0, cl_float a1)
{
    cl_float2 r;
    r.s[0] = a0; r.s[1] = a1;
    return r;
}

/// Construct a 4-D float vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_float4 float4(cl_float a)
{
    cl_float4 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    return r;
}

/// Construct a 4-D float vector from four elements.
inline cl_float4 float4(cl_float a0, cl_float a1, cl_float a2, cl_float a3)
{
    cl_float4 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    return r;
}

/// Construct a 4-D float vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_float4 float4(cl_float2 a)
{
    cl_float4 r;
#if defined( __CL_FLOAT2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
#endif // __CL_FLOAT2__
    return r;
}

/// Construct a 4-D float vector from two 2-D vectors.
inline cl_float4 float4(cl_float2 a0, cl_float2 a1)
{
    cl_float4 r;
#if defined( __CL_FLOAT2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
#endif // __CL_FLOAT2__
    return r;
}

/// Construct an 8-D float vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_float8 float8(cl_float a)
{
    cl_float8 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    r.s[4] = a; r.s[5] = a; r.s[6] = a; r.s[7] = a;
    return r;
}

/// Construct an 8-D float vector from eight elements.
inline cl_float8 float8(cl_float a0, cl_float a1, cl_float a2, cl_float a3, cl_float a4, cl_float a5, cl_float a6, cl_float a7)
{
    cl_float8 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    r.s[4] = a4; r.s[5] = a5; r.s[6] = a6; r.s[7] = a7;
    return r;
}

/// Construct an 8-D float vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_float8 float8(cl_float2 a)
{
    cl_float8 r;
#if defined( __CL_FLOAT2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2; r.v2[2] = a.v2; r.v2[3] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[0]; r.s[7] = a.s[1];
#endif // __CL_FLOAT2__
    return r;
}

/// Construct an 8-D float vector from four 2-D vectors.
inline cl_float8 float8(cl_float2 a0, cl_float2 a1, cl_float2 a2, cl_float2 a3)
{
    cl_float8 r;
#if defined( __CL_FLOAT2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2; r.v2[2] = a2.v2; r.v2[3] = a3.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
    r.s[4] = a2.s[0]; r.s[5] = a2.s[1]; r.s[6] = a3.s[0]; r.s[7] = a3.s[1];
#endif // __CL_FLOAT2__
    return r;
}

/// Construct an 8-D float vector from a 4-D vector.
/// This 4-D vector will be replicated to all components of the returned vector.
inline cl_float8 float8(cl_float4 a)
{
    cl_float8 r;
#if defined( __CL_FLOAT4__ )
    r.v4[0] = a.v4; r.v4[1] = a.v4;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[2]; r.s[7] = a.s[3];
#endif // __CL_FLOAT4__
    return r;
}

/// Construct an 8-D float vector from two 4-D vectors.
inline cl_float8 float8(cl_float4 a0, cl_float4 a1)
{
    cl_float8 r;
#if defined( __CL_FLOAT4__ )
    r.v4[0] = a0.v4; r.v4[1] = a1.v4;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a1.s[0]; r.s[5] = a1.s[1]; r.s[6] = a1.s[2]; r.s[7] = a1.s[3];
#endif // __CL_FLOAT4__
    return r;
}

/// Construct a 16-D float vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_float16 float16(cl_float a)
{
    cl_float16 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    r.s[4] = a; r.s[5] = a; r.s[6] = a; r.s[7] = a;
    r.s[8] = a; r.s[9] = a; r.s[10] = a; r.s[11] = a;
    r.s[12] = a; r.s[13] = a; r.s[14] = a; r.s[15] = a;
    return r;
}

/// Construct a 16-D float vector from sixteen elements.
inline cl_float16 float16(cl_float a0, cl_float a1, cl_float a2, cl_float a3, cl_float a4, cl_float a5, cl_float a6, cl_float a7, cl_float a8, cl_float a9, cl_float a10, cl_float a11, cl_float a12, cl_float a13, cl_float a14, cl_float a15)
{
    cl_float16 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    r.s[4] = a4; r.s[5] = a5; r.s[6] = a6; r.s[7] = a7;
    r.s[8] = a8; r.s[9] = a9; r.s[10] = a10; r.s[11] = a11;
    r.s[12] = a12; r.s[13] = a13; r.s[14] = a14; r.s[15] = a15;
    return r;
}

/// Construct a 16-D float vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_float16 float16(cl_float2 a)
{
    cl_float16 r;
#if defined( __CL_FLOAT2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2; r.v2[2] = a.v2; r.v2[3] = a.v2;
    r.v2[4] = a.v2; r.v2[5] = a.v2; r.v2[6] = a.v2; r.v2[7] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[0]; r.s[7] = a.s[1];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[0]; r.s[11] = a.s[1];
    r.s[12] = a.s[0]; r.s[13] = a.s[1]; r.s[14] = a.s[0]; r.s[15] = a.s[1];
#endif // __CL_FLOAT2__
    return r;
}

/// Construct a 16-D float vector from eight 2-D vectors.
inline cl_float16 float16(cl_float2 a0, cl_float2 a1, cl_float2 a2, cl_float2 a3, cl_float2 a4, cl_float2 a5, cl_float2 a6, cl_float2 a7)
{
    cl_float16 r;
#if defined( __CL_FLOAT2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2; r.v2[2] = a2.v2; r.v2[3] = a3.v2;
    r.v2[4] = a4.v2; r.v2[5] = a5.v2; r.v2[6] = a6.v2; r.v2[7] = a7.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
    r.s[4] = a2.s[0]; r.s[5] = a2.s[1]; r.s[6] = a3.s[0]; r.s[7] = a3.s[1];
    r.s[8] = a4.s[0]; r.s[9] = a4.s[1]; r.s[10] = a5.s[0]; r.s[11] = a5.s[1];
    r.s[12] = a6.s[0]; r.s[13] = a6.s[1]; r.s[14] = a7.s[0]; r.s[15] = a7.s[1];
#endif // __CL_FLOAT2__
    return r;
}

/// Construct a 16-D float vector from a 4-D vector.
/// This 4-D vector will be replicated to all components of the returned vector.
inline cl_float16 float16(cl_float4 a)
{
    cl_float16 r;
#if defined( __CL_FLOAT4__ )
    r.v4[0] = a.v4; r.v4[1] = a.v4; r.v4[2] = a.v4; r.v4[3] = a.v4;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[2]; r.s[7] = a.s[3];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[2]; r.s[11] = a.s[3];
    r.s[12] = a.s[0]; r.s[13] = a.s[1]; r.s[14] = a.s[2]; r.s[15] = a.s[3];
#endif // __CL_FLOAT4__
    return r;
}

/// Construct a 16-D float vector from four 4-D vectors.
inline cl_float16 float16(cl_float4 a0, cl_float4 a1, cl_float4 a2, cl_float4 a3)
{
    cl_float16 r;
#if defined( __CL_FLOAT4__ )
    r.v4[0] = a0.v4; r.v4[1] = a1.v4; r.v4[2] = a2.v4; r.v4[3] = a3.v4;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a1.s[0]; r.s[5] = a1.s[1]; r.s[6] = a1.s[2]; r.s[7] = a1.s[3];
    r.s[8] = a2.s[0]; r.s[9] = a2.s[1]; r.s[10] = a2.s[2]; r.s[11] = a2.s[3];
    r.s[12] = a3.s[0]; r.s[13] = a3.s[1]; r.s[14] = a3.s[2]; r.s[15] = a3.s[3];
#endif // __CL_FLOAT4__
    return r;
}

/// Construct a 16-D float vector from an 8-D vector.
/// This 8-D vector will be replicated to all components of the returned vector.
inline cl_float16 float16(cl_float8 a)
{
    cl_float16 r;
#if defined( __CL_FLOAT8__ )
    r.v8[0] = a.v8; r.v8[1] = a.v8;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[4]; r.s[5] = a.s[5]; r.s[6] = a.s[6]; r.s[7] = a.s[7];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[2]; r.s[11] = a.s[3];
    r.s[12] = a.s[4]; r.s[13] = a.s[5]; r.s[14] = a.s[6]; r.s[15] = a.s[7];
#endif // __CL_FLOAT8__
    return r;
}

/// Construct a 16-D float vector from two 8-D vectors.
inline cl_float16 float16(cl_float8 a0, cl_float8 a1)
{
    cl_float16 r;
#if defined( __CL_FLOAT8__ )
    r.v8[0] = a0.v8; r.v8[1] = a1.v8;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a0.s[4]; r.s[5] = a0.s[5]; r.s[6] = a0.s[6]; r.s[7] = a0.s[7];
    r.s[8] = a1.s[0]; r.s[9] = a1.s[1]; r.s[10] = a1.s[2]; r.s[11] = a1.s[3];
    r.s[12] = a1.s[4]; r.s[13] = a1.s[5]; r.s[14] = a1.s[6]; r.s[15] = a1.s[7];
#endif // __CL_FLOAT8__
    return r;
}

/// Construct a 2-D double vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_double2 double2(cl_double a)
{
    cl_double2 r;
    r.s[0] = a; r.s[1] = a;
    return r;
}

/// Construct a 2-D double vector from two elements.
inline cl_double2 double2(cl_double a0, cl_double a1)
{
    cl_double2 r;
    r.s[0] = a0; r.s[1] = a1;
    return r;
}

/// Construct a 4-D double vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_double4 double4(cl_double a)
{
    cl_double4 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    return r;
}

/// Construct a 4-D double vector from four elements.
inline cl_double4 double4(cl_double a0, cl_double a1, cl_double a2, cl_double a3)
{
    cl_double4 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    return r;
}

/// Construct a 4-D double vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_double4 double4(cl_double2 a)
{
    cl_double4 r;
#if defined( __CL_DOUBLE2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
#endif // __CL_DOUBLE2__
    return r;
}

/// Construct a 4-D double vector from two 2-D vectors.
inline cl_double4 double4(cl_double2 a0, cl_double2 a1)
{
    cl_double4 r;
#if defined( __CL_DOUBLE2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
#endif // __CL_DOUBLE2__
    return r;
}

/// Construct an 8-D double vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_double8 double8(cl_double a)
{
    cl_double8 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    r.s[4] = a; r.s[5] = a; r.s[6] = a; r.s[7] = a;
    return r;
}

/// Construct an 8-D double vector from eight elements.
inline cl_double8 double8(cl_double a0, cl_double a1, cl_double a2, cl_double a3, cl_double a4, cl_double a5, cl_double a6, cl_double a7)
{
    cl_double8 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    r.s[4] = a4; r.s[5] = a5; r.s[6] = a6; r.s[7] = a7;
    return r;
}

/// Construct an 8-D double vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_double8 double8(cl_double2 a)
{
    cl_double8 r;
#if defined( __CL_DOUBLE2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2; r.v2[2] = a.v2; r.v2[3] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[0]; r.s[7] = a.s[1];
#endif // __CL_DOUBLE2__
    return r;
}

/// Construct an 8-D double vector from four 2-D vectors.
inline cl_double8 double8(cl_double2 a0, cl_double2 a1, cl_double2 a2, cl_double2 a3)
{
    cl_double8 r;
#if defined( __CL_DOUBLE2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2; r.v2[2] = a2.v2; r.v2[3] = a3.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
    r.s[4] = a2.s[0]; r.s[5] = a2.s[1]; r.s[6] = a3.s[0]; r.s[7] = a3.s[1];
#endif // __CL_DOUBLE2__
    return r;
}

/// Construct an 8-D double vector from a 4-D vector.
/// This 4-D vector will be replicated to all components of the returned vector.
inline cl_double8 double8(cl_double4 a)
{
    cl_double8 r;
#if defined( __CL_DOUBLE4__ )
    r.v4[0] = a.v4; r.v4[1] = a.v4;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[2]; r.s[7] = a.s[3];
#endif // __CL_DOUBLE4__
    return r;
}

/// Construct an 8-D double vector from two 4-D vectors.
inline cl_double8 double8(cl_double4 a0, cl_double4 a1)
{
    cl_double8 r;
#if defined( __CL_DOUBLE4__ )
    r.v4[0] = a0.v4; r.v4[1] = a1.v4;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a1.s[0]; r.s[5] = a1.s[1]; r.s[6] = a1.s[2]; r.s[7] = a1.s[3];
#endif // __CL_DOUBLE4__
    return r;
}

/// Construct a 16-D double vector from a scalar value.
/// The scalar value will be replicated to all components of the returned vector.
inline cl_double16 double16(cl_double a)
{
    cl_double16 r;
    r.s[0] = a; r.s[1] = a; r.s[2] = a; r.s[3] = a;
    r.s[4] = a; r.s[5] = a; r.s[6] = a; r.s[7] = a;
    r.s[8] = a; r.s[9] = a; r.s[10] = a; r.s[11] = a;
    r.s[12] = a; r.s[13] = a; r.s[14] = a; r.s[15] = a;
    return r;
}

/// Construct a 16-D double vector from sixteen elements.
inline cl_double16 double16(cl_double a0, cl_double a1, cl_double a2, cl_double a3, cl_double a4, cl_double a5, cl_double a6, cl_double a7, cl_double a8, cl_double a9, cl_double a10, cl_double a11, cl_double a12, cl_double a13, cl_double a14, cl_double a15)
{
    cl_double16 r;
    r.s[0] = a0; r.s[1] = a1; r.s[2] = a2; r.s[3] = a3;
    r.s[4] = a4; r.s[5] = a5; r.s[6] = a6; r.s[7] = a7;
    r.s[8] = a8; r.s[9] = a9; r.s[10] = a10; r.s[11] = a11;
    r.s[12] = a12; r.s[13] = a13; r.s[14] = a14; r.s[15] = a15;
    return r;
}

/// Construct a 16-D double vector from a 2-D vector.
/// This 2-D vector will be replicated to all components of the returned vector.
inline cl_double16 double16(cl_double2 a)
{
    cl_double16 r;
#if defined( __CL_DOUBLE2__ )
    r.v2[0] = a.v2; r.v2[1] = a.v2; r.v2[2] = a.v2; r.v2[3] = a.v2;
    r.v2[4] = a.v2; r.v2[5] = a.v2; r.v2[6] = a.v2; r.v2[7] = a.v2;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[0]; r.s[3] = a.s[1];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[0]; r.s[7] = a.s[1];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[0]; r.s[11] = a.s[1];
    r.s[12] = a.s[0]; r.s[13] = a.s[1]; r.s[14] = a.s[0]; r.s[15] = a.s[1];
#endif // __CL_DOUBLE2__
    return r;
}

/// Construct a 16-D double vector from eight 2-D vectors.
inline cl_double16 double16(cl_double2 a0, cl_double2 a1, cl_double2 a2, cl_double2 a3, cl_double2 a4, cl_double2 a5, cl_double2 a6, cl_double2 a7)
{
    cl_double16 r;
#if defined( __CL_DOUBLE2__ )
    r.v2[0] = a0.v2; r.v2[1] = a1.v2; r.v2[2] = a2.v2; r.v2[3] = a3.v2;
    r.v2[4] = a4.v2; r.v2[5] = a5.v2; r.v2[6] = a6.v2; r.v2[7] = a7.v2;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a1.s[0]; r.s[3] = a1.s[1];
    r.s[4] = a2.s[0]; r.s[5] = a2.s[1]; r.s[6] = a3.s[0]; r.s[7] = a3.s[1];
    r.s[8] = a4.s[0]; r.s[9] = a4.s[1]; r.s[10] = a5.s[0]; r.s[11] = a5.s[1];
    r.s[12] = a6.s[0]; r.s[13] = a6.s[1]; r.s[14] = a7.s[0]; r.s[15] = a7.s[1];
#endif // __CL_DOUBLE2__
    return r;
}

/// Construct a 16-D double vector from a 4-D vector.
/// This 4-D vector will be replicated to all components of the returned vector.
inline cl_double16 double16(cl_double4 a)
{
    cl_double16 r;
#if defined( __CL_DOUBLE4__ )
    r.v4[0] = a.v4; r.v4[1] = a.v4; r.v4[2] = a.v4; r.v4[3] = a.v4;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[0]; r.s[5] = a.s[1]; r.s[6] = a.s[2]; r.s[7] = a.s[3];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[2]; r.s[11] = a.s[3];
    r.s[12] = a.s[0]; r.s[13] = a.s[1]; r.s[14] = a.s[2]; r.s[15] = a.s[3];
#endif // __CL_DOUBLE4__
    return r;
}

/// Construct a 16-D double vector from four 4-D vectors.
inline cl_double16 double16(cl_double4 a0, cl_double4 a1, cl_double4 a2, cl_double4 a3)
{
    cl_double16 r;
#if defined( __CL_DOUBLE4__ )
    r.v4[0] = a0.v4; r.v4[1] = a1.v4; r.v4[2] = a2.v4; r.v4[3] = a3.v4;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a1.s[0]; r.s[5] = a1.s[1]; r.s[6] = a1.s[2]; r.s[7] = a1.s[3];
    r.s[8] = a2.s[0]; r.s[9] = a2.s[1]; r.s[10] = a2.s[2]; r.s[11] = a2.s[3];
    r.s[12] = a3.s[0]; r.s[13] = a3.s[1]; r.s[14] = a3.s[2]; r.s[15] = a3.s[3];
#endif // __CL_DOUBLE4__
    return r;
}

/// Construct a 16-D double vector from an 8-D vector.
/// This 8-D vector will be replicated to all components of the returned vector.
inline cl_double16 double16(cl_double8 a)
{
    cl_double16 r;
#if defined( __CL_DOUBLE8__ )
    r.v8[0] = a.v8; r.v8[1] = a.v8;
#else
    r.s[0] = a.s[0]; r.s[1] = a.s[1]; r.s[2] = a.s[2]; r.s[3] = a.s[3];
    r.s[4] = a.s[4]; r.s[5] = a.s[5]; r.s[6] = a.s[6]; r.s[7] = a.s[7];
    r.s[8] = a.s[0]; r.s[9] = a.s[1]; r.s[10] = a.s[2]; r.s[11] = a.s[3];
    r.s[12] = a.s[4]; r.s[13] = a.s[5]; r.s[14] = a.s[6]; r.s[15] = a.s[7];
#endif // __CL_DOUBLE8__
    return r;
}

/// Construct a 16-D double vector from two 8-D vectors.
inline cl_double16 double16(cl_double8 a0, cl_double8 a1)
{
    cl_double16 r;
#if defined( __CL_DOUBLE8__ )
    r.v8[0] = a0.v8; r.v8[1] = a1.v8;
#else
    r.s[0] = a0.s[0]; r.s[1] = a0.s[1]; r.s[2] = a0.s[2]; r.s[3] = a0.s[3];
    r.s[4] = a0.s[4]; r.s[5] = a0.s[5]; r.s[6] = a0.s[6]; r.s[7] = a0.s[7];
    r.s[8] = a1.s[0]; r.s[9] = a1.s[1]; r.s[10] = a1.s[2]; r.s[11] = a1.s[3];
    r.s[12] = a1.s[4]; r.s[13] = a1.s[5]; r.s[14] = a1.s[6]; r.s[15] = a1.s[7];
#endif // __CL_DOUBLE8__
    return r;
}

} // namespace clpp

#endif // CLPP_VECTOR_HPP
