-- genvec.lua
--
-- This program is written to generate vector.hpp which containts
-- constructors for OpenCL vector types.

TYPE_PREFIX = "cl_" -- OpenCL prefix for vector types

function GenNameAndTypes(base, dim, arg_dim)
    -- function name: base#
    local name = base .. dim

    -- argument type: cl_base$
    local arg_type = TYPE_PREFIX .. base

    if arg_dim > 1 then
        arg_type = arg_type .. arg_dim
    end

    -- return type: cl_base#
    local ret_type = TYPE_PREFIX .. base .. dim
    return name, arg_type, ret_type
end

function GenSimpleCtor(base, dim, arg_dim)
    local name, arg_type, ret_type = GenNameAndTypes(base, dim, arg_dim)
    
    local args = string.format("%s a", arg_type)
    local argc = dim/arg_dim
    
    local body = string.format("    %s r;", ret_type);
    for i = 0, argc-1 do
        if i%4 == 0 then
            body = body .. "\n   "
        end
        if arg_dim == 1 then
            -- use the vector part
            -- r.s[i] = a
            body = string.format("%s r.s[%d] = a;", body, i)
        else
            body = string.format("%s r.v%d[%d] = a.v%d;", body, arg_dim, i, arg_dim)
        end
    end
    body = body .. "\n    return r;\n"
 
    local func = string.format("inline %s %s(%s)\n{\n%s}\n", ret_type, name, args, body)
    if arg_dim > 1 then
        local sym = "__" .. string.upper(arg_type) .. "__"
        func = string.format("#if defined( %s )\n%s#endif // %s\n", sym, func, sym);
    end
    return func
end

function GenComplexCtor(base, dim, arg_dim)
    local name, arg_type, ret_type = GenNameAndTypes(base, dim, arg_dim)

    local args = ""
    local argc = dim/arg_dim
    for i = 0, argc-1 do
        -- arguments are named by "cl_base si"
        args = string.format("%s%s a%d", args, arg_type, i)
        if i ~= argc-1 then
            args = args .. ", "
        end
    end
    
    -- cl_base# r;
    local body = string.format("    %s r;", ret_type)
    for i = 0, argc-1 do
        -- four items per line, to be readable
        if i%4 == 0 then
            body = body .. "\n   "
        end
        if arg_dim == 1 then
            -- use the vector part
            -- r.s[i] = ai
            body = string.format("%s r.s[%d] = a%d;", body, i, i)
        else
            body = string.format("%s r.v%d[%d] = a%d.v%d;", body, arg_dim, i, i, arg_dim)
        end
    end
    body = body .. "\n    return r;\n"
    
    local func = string.format("inline %s %s(%s)\n{\n%s}\n", ret_type, name, args, body)
    if arg_dim > 1 then
        local sym = "__" .. string.upper(arg_type) .. "__"
        func = string.format("#if defined( %s )\n%s#endif // %s\n", sym, func, sym);
    end
    return func
end

-- Generate headers
print("#ifndef CLPP_VECTOR_HPP")
print("#define CLPP_VECTOR_HPP\n")

print("/* vector.hpp")
print(" * This file is generated by genvec.lua automatically.")
print(" * DO NOT MODIFY THIS FILE DIRECTLY.")
print(" * Please edit genvec.lua and re-generate this file for modification.")
print(" */\n")

print("#include \"size.hpp\"\n")
print("namespace clpp {\n")

local TYPES = {
    "char", "uchar",
    "short", "ushort",
    "int", "uint",
    "long", "ulong",
    "float", "double"
}

local DIMS = { 1, 2, 4, 8, 16 }

for t, base in ipairs(TYPES) do
    for i, dim in ipairs(DIMS) do
        for j = 1, i-1 do
            print(GenSimpleCtor(base, dim, DIMS[j]))
            print(GenComplexCtor(base, dim, DIMS[j]))
        end
    end
end

print("} // namespace clpp\n")
print("#endif // CLPP_VECTOR_HPP")
